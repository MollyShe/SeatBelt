File: ./css/sliders.css
-------------------------

File: ./css/styles.css
-------------------------
* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: Arial, sans-serif;
    background-color: #f5f5f5;
    min-height: 100vh;
    display: flex;
    justify-content: center;
    align-items: center;
}

.container {
    background-color: white;
    border-radius: 10px;
    box-shadow: 0 0 20px rgba(0, 0, 0, 0.1);
    padding: 20px;
    width: 90%;
    max-width: 1200px;
}

.drop-zone {
    border: 2px dashed #ccc;
    border-radius: 8px;
    padding: 40px;
    text-align: center;
    cursor: pointer;
    transition: border-color 0.3s ease;
}

.drop-zone.dragover {
    border-color: #2196F3;
    background-color: rgba(33, 150, 243, 0.1);
}

.editor-section {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.canvas-container {
    max-height: 500px;
    overflow: hidden;
    display: flex;
    justify-content: center;
    align-items: center;
}

.controls {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 20px;
    padding: 20px;
}

.actions {
    display: flex;
    justify-content: flex-end;
    gap: 10px;
}

button {
    padding: 10px 20px;
    border: none;
    border-radius: 5px;
    background-color: #2196F3;
    color: white;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #1976D2;
}
File: ./index.html
-------------------------
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SeatBelt Photo Editor</title>
    <link rel="stylesheet" href="css/styles.css">
    <link rel="stylesheet" href="css/sliders.css">
</head>
<body>
    <div class="container">
        <div class="upload-section" id="uploadSection">
            <input type="file" id="fileInput" accept="image/*" hidden>
            <div class="drop-zone" id="dropZone">
                <p>Drag & Drop your image here or</p>
                <button id="uploadBtn">Choose File</button>
            </div>
        </div>

        <div class="editor-section" id="editorSection" hidden>
            <div class="canvas-container">
                <canvas id="imageCanvas"></canvas>
            </div>
            
            <div class="controls">
                <div class="slider-group">
                    <label>Brightness</label>
                    <input type="range" id="brightness" min="0" max="200" value="100">
                    <span class="value">100%</span>
                </div>

                <div class="slider-group">
                    <label>Blur</label>
                    <input type="range" id="blur" min="0" max="10" value="0">
                    <span class="value">0px</span>
                </div>
            </div>

            <div class="actions">
                <button id="resetBtn">Reset</button>
                <button id="downloadBtn">Download</button>
            </div>
        </div>
    </div>

    <script src="js/fileUploader.js"></script>
    <script src="js/imageProcessor.js"></script>
    <script src="js/sliders.js"></script>
    <script src="js/main.js"></script>
</body>
</html>
File: ./js/fileUploader.js
-------------------------
function initFileUploader() {
    const dropZone = document.getElementById('dropZone');
    const fileInput = document.getElementById('fileInput');
    const uploadBtn = document.getElementById('uploadBtn');
    const uploadSection = document.getElementById('uploadSection');
    const editorSection = document.getElementById('editorSection');

    // Handle drag and drop
    dropZone.addEventListener('dragover', (e) => {
        e.preventDefault();
        dropZone.classList.add('dragover');
    });

    dropZone.addEventListener('dragleave', () => {
        dropZone.classList.remove('dragover');
    });

    dropZone.addEventListener('drop', (e) => {
        e.preventDefault();
        dropZone.classList.remove('dragover');
        const file = e.dataTransfer.files[0];
        if (file && file.type.startsWith('image/')) {
            handleImage(file);
        }
    });

    // Handle button upload
    uploadBtn.addEventListener('click', () => {
        fileInput.click();
    });

    fileInput.addEventListener('change', (e) => {
        const file = e.target.files[0];
        if (file) {
            handleImage(file);
        }
    });

    function handleImage(file) {
        const reader = new FileReader();
        reader.onload = (e) => {
            const img = new Image();
            img.onload = () => {
                uploadSection.hidden = true;
                editorSection.hidden = false;
                initCanvas(img);
            };
            img.src = e.target.result;
        };
        reader.readAsDataURL(file);
    }
}

File: ./js/imageProcessor.js
-------------------------
let canvas, ctx, originalImage;

function initImageProcessor() {
    canvas = document.getElementById('imageCanvas');
    ctx = canvas.getContext('2d');
}

function initCanvas(img) {
    originalImage = img;
    
    // Set canvas size while maintaining aspect ratio
    const maxWidth = canvas.parentElement.clientWidth;
    const maxHeight = canvas.parentElement.clientHeight;
    const ratio = Math.min(maxWidth / img.width, maxHeight / img.height);
    
    canvas.width = img.width * ratio;
    canvas.height = img.height * ratio;
    
    applyFilters();
}

function applyFilters() {
    const brightness = document.getElementById('brightness').value;
    const contrast = document.getElementById('contrast').value;
    const saturation = document.getElementById('saturation').value;
    const blur = document.getElementById('blur').value;

    ctx.filter = `
        brightness(${brightness}%) 
        contrast(${contrast}%) 
        saturate(${saturation}%)
        blur(${blur}px)
    `;
    
    ctx.drawImage(originalImage, 0, 0, canvas.width, canvas.height);
}
File: ./js/main.js
-------------------------
document.addEventListener('DOMContentLoaded', () => {
    // Initialize all components
    initFileUploader();
    initImageProcessor();
    initSliders();
});

File: ./js/sliders.js
-------------------------
function initSliders() {
    const sliders = document.querySelectorAll('input[type="range"]');
    
    sliders.forEach(slider => {
        const valueDisplay = slider.nextElementSibling;
        
        slider.addEventListener('input', () => {
            let unit = '';
            switch(slider.id) {
                case 'blur':
                    unit = 'px';
                    break;
                default:
                    unit = '%';
            }
            valueDisplay.textContent = slider.value + unit;
            applyFilters();
        });
    });

    // Reset button functionality
    document.getElementById('resetBtn').addEventListener('click', () => {
        sliders.forEach(slider => {
            slider.value = slider.id === 'blur' ? 0 : 100;
            slider.nextElementSibling.textContent = slider.value + 
                (slider.id === 'blur' ? 'px' : '%');
        });
        applyFilters();
    });

    // Download button functionality
    document.getElementById('downloadBtn').addEventListener('click', () => {
        const link = document.createElement('a');
        link.download = 'edited-image.png';
        link.href = canvas.toDataURL();
        link.click();
    });
}
